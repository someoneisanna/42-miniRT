t_shapes	*shapes = ft_create_shape(SPHERE);
ft_set_transform(shapes, ft_create_translation_matrix(0, 1, 0));
t_vec3 normal = ft_normal_at(shapes, ft_point(0, 1.70711, -0.70711));
printf("main: %f %f %f\n", normal.x, normal.y, normal.z);
------------
t_shapes	*shapes2 = ft_create_shape(SPHERE);
t_matrix m = ft_multiply_matrix(ft_create_scaling_matrix(1, 0.5, 1), ft_create_rotation_matrix('z', PI / 5));
ft_set_transform(shapes2, m);
t_vec3 normal2 = ft_normal_at(shapes2, ft_point(0, sqrt(2) / 2, -sqrt(2) / 2));
printf("main: %f %f %f\n", normal2.x, normal2.y, normal2.z);
------------
t_shapes *plane = ft_create_shape(PLANE);
t_vec3 n1 = ft_normal_at(plane, ft_point(0, 0, 0));
t_vec3 n2 = ft_normal_at(plane, ft_point(10, 0, -10));
t_vec3 n3 = ft_normal_at(plane, ft_point(-5, 0, 150));
printf("n1: %f %f %f\n", n1.x, n1.y, n1.z);
printf("n2: %f %f %f\n", n2.x, n2.y, n2.z);
printf("n3: %f %f %f\n", n3.x, n3.y, n3.z);
------------
t_shapes *plane = ft_create_shape(PLANE);

t_ray r = (t_ray){ft_point(0, 1, 0), ft_vector(0, -1, 0)};
t_intersections *i = NULL;
ft_plane_intersections(&i, plane, r);
if (i)
	printf("i->t: %f\n", ((t_intersection *)i->content)->t);

t_ray r2 = ft_create_ray(ft_point(0, -1, 0), ft_vector(0, 1, 0));
ft_plane_intersections(&i, plane, r2);
if (i)
	printf("i->t: %f\n", ((t_intersection *)i->content)->t);
ft_free_intersections(&i);
ft_free_shapes(plane);
------------
t_pattern p = stripe_pattern((t_color) WHITE, (t_color) BLACK);
printf("a: %f %f %f %f\n", p.a.x, p.a.y, p.a.z, p.a.w);
printf("b: %f %f %f %f\n", p.b.x, p.b.y, p.b.z, p.b.w);
------------
t_pattern p = stripe_pattern((t_color) WHITE, (t_color) BLACK);
t_color c = ft_stripe_at(p, ft_point(0, 0, 0));
printf("Stripe at 0,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(0, 1, 0));
printf("Stripe at 0,1,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(0, 2, 0));
printf("Stripe at 0,2,0: %f %f %f\n", c.x, c.y, c.z);

c = ft_stripe_at(p, ft_point(0, 0, 0));
printf("Stripe at 0,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(0, 0, 1));
printf("Stripe at 0,0,1: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(0, 0, 2));
printf("Stripe at 0,0,2: %f %f %f\n", c.x, c.y, c.z);

c = ft_stripe_at(p, ft_point(0, 0, 0));
printf("Stripe at 0,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(0.9, 0, 0));
printf("Stripe at 0.9,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(1, 0, 0));
printf("Stripe at 1,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(-0.1, 0, 0));
printf("Stripe at -0.1,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(-1, 0, 0));
printf("Stripe at -1,0,0: %f %f %f\n", c.x, c.y, c.z);
c = ft_stripe_at(p, ft_point(-1.1, 0, 0));
printf("Stripe at -1.1,0,0: %f %f %f\n", c.x, c.y, c.z);
------------
t_material m = ft_create_material();
t_pattern p = stripe_pattern((t_color)WHITE, (t_color)BLACK);
m.pattern = p;
m.ambient = 1;
m.diffuse = 0;
m.specular = 0;
t_vec3 eyev = (t_vec3){0, 0, -1, 0};
t_vec3 normalv = (t_vec3){0, 0, -1, 0};
t_light light = (t_light){(t_point){0, 0, -10, 1}, (t_color){1, 1, 1, 3}};
t_color c1 = ft_lighting(m, light, (t_point){0.9, 0, 0, 1}, eyev, normalv, false);
t_color c2 = ft_lighting(m, light, (t_point){1.1, 0, 0, 1}, eyev, normalv, false);
printf("c1: %f %f %f %f\n", c1.x, c1.y, c1.z, c1.w);
printf("c2: %f %f %f %f\n", c2.x, c2.y, c2.z, c2.w);
------------
t_shapes *s = ft_create_shape(SPHERE);
ft_set_transform(s, ft_create_scaling_matrix(2, 2, 2));
t_pattern p = ft_stripe_pattern((t_color)WHITE, (t_color)BLACK);
t_color c = ft_stripe_at_object(p, s, (t_point){1.5, 0, 0, 1});
printf("c: %f %f %f\n", c.x, c.y, c.z);

t_shapes *s1 = ft_create_shape(SPHERE);
t_pattern p1 = ft_stripe_pattern((t_color)WHITE, (t_color)BLACK);
ft_set_pattern_transform(&p1, ft_create_scaling_matrix(2, 2, 2));
t_color c1 = ft_stripe_at_object(p1, s1, (t_point){1.5, 0, 0, 1});
printf("c1: %f %f %f\n", c1.x, c1.y, c1.z);

t_shapes *s2 = ft_create_shape(SPHERE);
ft_set_transform(s2, ft_create_scaling_matrix(2, 2, 2));
t_pattern p2 = ft_stripe_pattern((t_color)WHITE, (t_color)BLACK);
ft_set_pattern_transform(&p2, ft_create_translation_matrix(0.5, 0, 0));
t_color c2 = ft_stripe_at_object(p2, s2, (t_point){2.5, 0, 0, 1});
printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);

ft_free_shapes(s);
ft_free_shapes(s1);
ft_free_shapes(s2);
------------
t_pattern p = ft_create_pattern();
for (int i = 0; i < p.transform.rows; i++)
{
	for (int j = 0; j < p.transform.cols; j++)
		printf("%f ", p.transform.data[i][j]);
	printf("\n");
}
printf("\n");
ft_set_pattern_transform(&p, ft_create_translation_matrix(1, 2, 3));
for (int i = 0; i < p.transform.rows; i++)
{
	for (int j = 0; j < p.transform.cols; j++)
		printf("%f ", p.transform.data[i][j]);
	printf("\n");
}
------------
t_shapes *s = ft_create_shape(SPHERE);
	ft_set_transform(s, ft_create_scaling_matrix(2, 2, 2));
	t_pattern p = ft_create_pattern();
	t_color c = ft_pattern_at_shape(p, s, (t_point) {2, 3, 4, 1});
	printf("Color: %f %f %f\n", c.x, c.y, c.z);
	ft_free_shapes(s);

	t_shapes *s1 = ft_create_shape(SPHERE);
	t_pattern p1 = ft_create_pattern();
	ft_set_pattern_transform(&p1, ft_create_scaling_matrix(2, 2, 2));
	t_color c1 = ft_pattern_at_shape(p1, s1, (t_point) {2, 3, 4, 1});
	printf("Color: %f %f %f\n", c1.x, c1.y, c1.z);
	ft_free_shapes(s1);

	t_shapes *s2 = ft_create_shape(SPHERE);
	ft_set_transform(s2, ft_create_scaling_matrix(2, 2, 2));
	t_pattern p2 = ft_create_pattern();
	ft_set_pattern_transform(&p2, ft_create_translation_matrix(0.5, 1, 1.5));
	t_color c2 = ft_pattern_at_shape(p2, s2, (t_point) {2.5, 3, 3.5, 1});
	printf("Color: %f %f %f\n", c2.x, c2.y, c2.z);
	ft_free_shapes(s2);
------------
t_pattern p = ft_create_pattern();
p.type = GRADIENT;
t_color c1 = ft_gradient_at(p, (t_point){0, 0, 0, 1});
t_color c2 = ft_gradient_at(p, (t_point){0.25, 0, 0, 1});
t_color c3 = ft_gradient_at(p, (t_point){0.5, 0, 0, 1});
t_color c4 = ft_gradient_at(p, (t_point){0.75, 0, 0, 1});

printf("c1: %f %f %f\n", c1.x, c1.y, c1.z);
printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);
printf("c3: %f %f %f\n", c3.x, c3.y, c3.z);
printf("c4: %f %f %f\n", c4.x, c4.y, c4.z);
------------
t_pattern p = ft_create_pattern();
p.type = RING;
t_color c1 = ft_ring_at(p, (t_point) {0, 0, 0, 1});
t_color c2 = ft_ring_at(p, (t_point) {1, 0, 0, 1});
t_color c3 = ft_ring_at(p, (t_point) {0, 0, 1, 1});
t_color c4 = ft_ring_at(p, (t_point) {0.708, 0, 0.708, 1});

printf("c1: %f %f %f\n", c1.x, c1.y, c1.z);
printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);
printf("c3: %f %f %f\n", c3.x, c3.y, c3.z);
printf("c4: %f %f %f\n", c4.x, c4.y, c4.z);
------------
t_pattern p = ft_create_pattern();
p.type = CHECKERS;
t_color c1 = ft_checkers_at(p, (t_point) {0, 0, 0, 1});
t_color c2 = ft_checkers_at(p, (t_point) {0.99, 0, 0, 1});
t_color c3 = ft_checkers_at(p, (t_point) {1.01, 0, 0, 1});

printf("c1: %f %f %f\n", c1.x, c1.y, c1.z);
printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);
printf("c3: %f %f %f\n", c3.x, c3.y, c3.z);

c1 = ft_checkers_at(p, (t_point) {0, 0, 0, 1});
c2 = ft_checkers_at(p, (t_point) {0, 0.99, 0, 1});
c3 = ft_checkers_at(p, (t_point) {0, 1.01, 0, 1});

printf("c1: %f %f %f\n", c1.x, c1.y, c1.z);
printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);
printf("c3: %f %f %f\n", c3.x, c3.y, c3.z);

c1 = ft_checkers_at(p, (t_point) {0, 0, 0, 1});
c2 = ft_checkers_at(p, (t_point) {0, 0, 0.99, 1});
c3 = ft_checkers_at(p, (t_point) {0, 0, 1.01, 1});

printf("c1: %f %f %f\n", c1.x, c1.y, c1.z);
printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);
printf("c3: %f %f %f\n", c3.x, c3.y, c3.z);
------------









CYLINDER CHAPTER

t_shapes *cyl = ft_create_shape(CYLINDER);
t_vec3 direction1 = ft_normalize(ft_vector(0, 1, 0));
t_vec3 direction2 = ft_normalize(ft_vector(0, 1, 0));
t_vec3 direction3 = ft_normalize(ft_vector(1, 1, 1));
t_point origin1 = ft_point(1, 0, 0);
t_point origin2 = ft_point(0, 0, 0);
t_point origin3 = ft_point(0, 0, -5);

t_ray ray1 = ft_create_ray(origin1, direction1);
t_intersections *i1 = NULL;
ft_cylinder_intersections(&i1, cyl, ray1);
printf("n_intersections: %d\n", ft_lstsize(i1));

t_ray ray2 = ft_create_ray(origin2, direction2);
t_intersections *i2 = NULL;
ft_cylinder_intersections(&i2, cyl, ray2);
printf("n_intersections: %d\n", ft_lstsize(i2));

t_ray ray3 = ft_create_ray(origin3, direction3);
t_intersections *i3 = NULL;
ft_cylinder_intersections(&i3, cyl, ray3);
printf("n_intersections: %d\n", ft_lstsize(i3));

ft_free_shapes(cyl);
ft_free_intersections(&i1);
ft_free_intersections(&i2);
ft_free_intersections(&i3);

-------------------------

t_shapes *cyl = ft_create_shape(CYLINDER);
t_vec3 origin1 = ft_point(1, 0, -5);
t_vec3 origin2 = ft_point(0, 0, -5);
t_vec3 origin3 = ft_point(0.5, 0, -5);
t_vec3 direction1 = ft_normalize(ft_vector(0, 0, 1));
t_vec3 direction2 = ft_normalize(ft_vector(0, 0, 1));
t_vec3 direction3 = ft_normalize(ft_vector(0.1, 1, 1));

t_ray ray1 = ft_create_ray(origin1, direction1);
t_ray ray2 = ft_create_ray(origin2, direction2);
t_ray ray3 = ft_create_ray(origin3, direction3);

t_intersections *i = NULL;
ft_cylinder_intersections(&i, cyl, ray1);
printf("t0: %f\n", ((t_intersection *)i->content)->t);
printf("t1: %f\n", ((t_intersection *)i->next->content)->t);

t_intersections *i2 = NULL;
ft_cylinder_intersections(&i2, cyl, ray2);
printf("t0: %f\n", ((t_intersection *)i2->content)->t);
printf("t1: %f\n", ((t_intersection *)i2->next->content)->t);

t_intersections *i3 = NULL;
ft_cylinder_intersections(&i3, cyl, ray3);
printf("t0: %f\n", ((t_intersection *)i3->content)->t);
printf("t1: %f\n", ((t_intersection *)i3->next->content)->t);

ft_free_shapes(cyl);
ft_free_intersections(&i);
ft_free_intersections(&i2);
ft_free_intersections(&i3);

------------------------

t_shapes *cyl = ft_create_shape(CYLINDER);

t_point p1 = ft_point(1, 0, 0);
t_point p2 = ft_point(0, 5, -1);
t_point p3 = ft_point(0, -2, 1);
t_point p4 = ft_point(-1, 1, 0);

t_vec3 n1 = ft_cylinder_normal_at(cyl, p1);
t_vec3 n2 = ft_cylinder_normal_at(cyl, p2);
t_vec3 n3 = ft_cylinder_normal_at(cyl, p3);
t_vec3 n4 = ft_cylinder_normal_at(cyl, p4);

printf("n1: %f %f %f\n", n1.x, n1.y, n1.z);
printf("n2: %f %f %f\n", n2.x, n2.y, n2.z);
printf("n3: %f %f %f\n", n3.x, n3.y, n3.z);
printf("n4: %f %f %f\n", n4.x, n4.y, n4.z);

ft_free_shapes(cyl);

------------------------

t_shapes *cyl = ft_create_shape(CYLINDER);
printf("Cylinder id: %d\n", cyl->cylinder->id);
printf("Cylinder minimum: %f\n", cyl->cylinder->minimum);
printf("Cylinder maximum: %f\n", cyl->cylinder->maximum);
ft_free_shapes(cyl);

------------------------

t_shapes *cyl = ft_create_shape(CYLINDER);
cyl->cylinder->minimum = 1;
cyl->cylinder->maximum = 2;

t_point point1 = ft_point(0, 1.5, 0);
t_point point2 = ft_point(0, 3, -5);
t_point point3 = ft_point(0, 0, -5);
t_point point4 = ft_point(0, 2, -5);
t_point point5 = ft_point(0, 1, -5);
t_point point6 = ft_point(0, 1.5, -2);
t_vec3 direction1 = ft_normalize(ft_vector(0.1, 1, 0));
t_vec3 direction2 = ft_normalize(ft_vector(0, 0, 1));

t_ray ray1 = ft_create_ray(point1, direction1);
t_ray ray2 = ft_create_ray(point2, direction2);
t_ray ray3 = ft_create_ray(point3, direction2);
t_ray ray4 = ft_create_ray(point4, direction2);
t_ray ray5 = ft_create_ray(point5, direction2);
t_ray ray6 = ft_create_ray(point6, direction2);

t_intersections *i = NULL;
ft_cylinder_intersections(&i, cyl, ray1);
printf("Intersections: %d\n", ft_lstsize(i));
ft_free_intersections(&i);

t_intersections *i2 = NULL;
ft_cylinder_intersections(&i2, cyl, ray2);
printf("Intersections: %d\n", ft_lstsize(i2));
ft_free_intersections(&i2);

t_intersections *i3 = NULL;
ft_cylinder_intersections(&i3, cyl, ray3);
printf("Intersections: %d\n", ft_lstsize(i3));
ft_free_intersections(&i3);

t_intersections *i4 = NULL;
ft_cylinder_intersections(&i4, cyl, ray4);
printf("Intersections: %d\n", ft_lstsize(i4));
ft_free_intersections(&i4);

t_intersections *i5 = NULL;
ft_cylinder_intersections(&i5, cyl, ray5);
printf("Intersections: %d\n", ft_lstsize(i5));
ft_free_intersections(&i5);

t_intersections *i6 = NULL;
ft_cylinder_intersections(&i6, cyl, ray6);
printf("Intersections: %d\n", ft_lstsize(i6));
ft_free_intersections(&i6);

ft_free_shapes(cyl);

------------------------

t_shapes *cyl = ft_create_shape(CYLINDER);
printf("cylinder id: %d\n", cyl->cylinder->id);
printf("cylinder minimum: %f\n", cyl->cylinder->minimum);
printf("cylinder maximum: %f\n", cyl->cylinder->maximum);
printf("cylinder closed: %d\n", cyl->cylinder->closed);
ft_free_shapes(cyl);

------------------------

t_shapes *cyl = ft_create_shape(CYLINDER);
cyl->cylinder->minimum = 1;
cyl->cylinder->maximum = 2;
cyl->cylinder->closed = true;

t_point p1 = ft_point(0, 3, 0);
t_point p2 = ft_point(0, 3, -2);
t_point p3 = ft_point(0, 4, -2);
t_point p4 = ft_point(0, 0, -2);
t_point p5 = ft_point(0, -1, -2);

t_vec3 d1 = ft_normalize(ft_vector(0, -1, 0));
t_vec3 d2 = ft_normalize(ft_vector(0, -1, 2));
t_vec3 d3 = ft_normalize(ft_vector(0, -1, 1));
t_vec3 d4 = ft_normalize(ft_vector(0, 1, 2));
t_vec3 d5 = ft_normalize(ft_vector(0, 1, 1));

t_ray r1 = ft_create_ray(p1, d1);
t_ray r2 = ft_create_ray(p2, d2);
t_ray r3 = ft_create_ray(p3, d3);
t_ray r4 = ft_create_ray(p4, d4);
t_ray r5 = ft_create_ray(p5, d5);

t_intersections *i = NULL;
ft_cylinder_intersections(&i, cyl, r1);
printf("n_intersections: %d\n", ft_lstsize(i));
ft_free_intersections(&i);

ft_cylinder_intersections(&i, cyl, r2);
printf("n_intersections: %d\n", ft_lstsize(i));
ft_free_intersections(&i);

ft_cylinder_intersections(&i, cyl, r3);
printf("n_intersections: %d\n", ft_lstsize(i));
ft_free_intersections(&i);

ft_cylinder_intersections(&i, cyl, r4);
printf("n_intersections: %d\n", ft_lstsize(i));
ft_free_intersections(&i);

ft_cylinder_intersections(&i, cyl, r5);
printf("n_intersections: %d\n", ft_lstsize(i));
ft_free_intersections(&i);

ft_free_shapes(cyl);

------------------------

t_shapes *c = ft_create_shape(CYLINDER);
c->cylinder->minimum = 1;
c->cylinder->maximum = 2;
c->cylinder->closed = true;

t_vec3 n1 = ft_cylinder_normal_at(c, (t_point){0, 1, 0, 1});
t_vec3 n2 = ft_cylinder_normal_at(c, (t_point){0.5, 1, 0, 1});
t_vec3 n3 = ft_cylinder_normal_at(c, (t_point){0, 1, 0.5, 1});
t_vec3 n4 = ft_cylinder_normal_at(c, (t_point){0, 2, 0, 1});
t_vec3 n5 = ft_cylinder_normal_at(c, (t_point){0.5, 2, 0, 1});
t_vec3 n6 = ft_cylinder_normal_at(c, (t_point){0, 2, 0.5, 1});

printf("n1: %f %f %f\n", n1.x, n1.y, n1.z);
printf("n2: %f %f %f\n", n2.x, n2.y, n2.z);
printf("n3: %f %f %f\n", n3.x, n3.y, n3.z);
printf("n4: %f %f %f\n", n4.x, n4.y, n4.z);
printf("n5: %f %f %f\n", n5.x, n5.y, n5.z);
printf("n6: %f %f %f\n", n6.x, n6.y, n6.z);

ft_free_shapes(c);

------------------------

CONES

t_shapes *s = ft_create_shape(CONE);

	t_vec3 d1 = ft_normalize(ft_vector(0, 0, 1));
	t_vec3 d2 = ft_normalize(ft_vector(1, 1, 1));
	t_vec3 d3 = ft_normalize(ft_vector(-0.5, -1, 1));

	t_point o1 = ft_point(0, 0, -5);
	t_point o2 = ft_point(0, 0, -5);
	t_point o3 = ft_point(1, 1, -5);

	t_ray r = ft_create_ray(o1, d1);
	t_ray r2 = ft_create_ray(o2, d2);
	t_ray r3 = ft_create_ray(o3, d3);

	t_intersections *i = NULL;
	ft_cone_intersections(&i, s, r);
	if (ft_lstsize(i) == 0)
		printf("No intersections\n");
	else
	{
		printf("t0: %f\n", ((t_intersection *)i->content)->t);
		printf("t1: %f\n", ((t_intersection *)i->next->content)->t);
	}
	ft_free_intersections(&i);

	t_intersections *i2 = NULL;
	ft_cone_intersections(&i2, s, r2);
	if (ft_lstsize(i2) == 0)
		printf("No intersections\n");
	else
	{
		printf("t0: %f\n", ((t_intersection *)i2->content)->t);
		printf("t1: %f\n", ((t_intersection *)i2->next->content)->t);
	}
	ft_free_intersections(&i2);

	t_intersections *i3 = NULL;
	ft_cone_intersections(&i3, s, r3);
	if (ft_lstsize(i3) == 0)
		printf("No intersections\n");
	else
	{
		printf("t0: %f\n", ((t_intersection *)i3->content)->t);
		printf("t1: %f\n", ((t_intersection *)i3->next->content)->t);
	}
	ft_free_intersections(&i3);

	t_vec3 d4 = ft_normalize(ft_vector(0, 1, 1));
	t_ray r4 = ft_create_ray(ft_point(0,0,-1), d4);
	t_intersections *i4 = NULL;
	ft_cone_intersections(&i4, s, r4);
	if (ft_lstsize(i4) == 0)
		printf("No intersections\n");
	else
	{
		printf("t0: %f\n", ((t_intersection *)i4->content)->t);
		if (i4->next)
			printf("t1: %f\n", ((t_intersection *)i4->next->content)->t);
	}
	ft_free_intersections(&i4);

------------------------

t_shapes	*s = ft_create_shape(CONE);
	s->cone->minimum = -0.5;
	s->cone->maximum = 0.5;
	s->cone->closed = true;

	t_ray r1 = ft_create_ray((t_point){0, 0, -5, 1}, ft_normalize((t_vec3){0, 1, 0, 0}));
	t_ray r2 = ft_create_ray((t_point){0, 0, -0.25, 1}, ft_normalize((t_vec3){0, 1, 1, 0}));
	t_ray r3 = ft_create_ray((t_point){0, 0, -0.25, 1}, ft_normalize((t_vec3){0, 1, 0, 0}));

	t_intersections	*i = NULL;
	ft_cone_intersections(&i, s, r1);
	printf("Intersections: %d\n", ft_lstsize(i));
	ft_free_intersections(&i);
	ft_cone_intersections(&i, s, r2);
	printf("Intersections: %d\n", ft_lstsize(i));
	ft_free_intersections(&i);
	ft_cone_intersections(&i, s, r3);
	printf("Intersections: %d\n", ft_lstsize(i));
	ft_free_intersections(&i);

	ft_free_shapes(s);

------------------------

t_shapes *s = ft_create_shape(CONE);

	t_vec3 n1 = ft_cone_normal_at(s, (t_point){0, 0, 0, 0});
	t_vec3 n2 = ft_cone_normal_at(s, (t_point){1, 1, 1, 0});
	t_vec3 n3 = ft_cone_normal_at(s, (t_point){-1, -1, 0, 0});

	printf("n1: %f %f %f\n", n1.x, n1.y, n1.z);
	printf("n2: %f %f %f\n", n2.x, n2.y, n2.z);
	printf("n3: %f %f %f\n", n3.x, n3.y, n3.z);

------------------------

CUBES

t_shapes *s = ft_create_shape(CUBE);
	t_ray r1 = ft_create_ray(ft_point(5, 0.5, 0), ft_vector(-1, 0, 0));
	t_ray r2 = ft_create_ray(ft_point(-5, 0.5, 0), ft_vector(1, 0, 0));
	t_ray r3 = ft_create_ray(ft_point(0.5, 5, 0), ft_vector(0, -1, 0));
	t_ray r4 = ft_create_ray(ft_point(0.5, -5, 0), ft_vector(0, 1, 0));
	t_ray r5 = ft_create_ray(ft_point(0.5, 0, 5), ft_vector(0, 0, -1));
	t_ray r6 = ft_create_ray(ft_point(0.5, 0, -5), ft_vector(0, 0, 1));
	t_ray r7 = ft_create_ray(ft_point(0, 0.5, 0), ft_vector(0, 0, 1));
	t_intersections *i = NULL;
	ft_cube_intersections(&i, s, r1);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_cube_intersections(&i, s, r2);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_cube_intersections(&i, s, r3);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_cube_intersections(&i, s, r4);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_cube_intersections(&i, s, r5);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_cube_intersections(&i, s, r6);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_cube_intersections(&i, s, r7);
	printf("t0: %f, t1: %f\n", ((t_intersection *)i->content)->t, ((t_intersection *)i->next->content)->t);
	ft_free_intersections(&i);
	ft_free_shapes(s);

------------------------

t_shapes *cube = ft_create_shape(CUBE);
	t_ray r1 = ft_create_ray(ft_point(-2, 0, 0), ft_vector(0.2673, 0.5345, 0.8018));
	t_ray r2 = ft_create_ray(ft_point(0, -2, 0), ft_vector(0.8018, 0.2673, 0.5345));
	t_ray r3 = ft_create_ray(ft_point(0, 0, -2), ft_vector(0.5345, 0.8018, 0.2673));
	t_ray r4 = ft_create_ray(ft_point(2, 0, 2), ft_vector(0, 0, -1));
	t_ray r5 = ft_create_ray(ft_point(0, 2, 2), ft_vector(0, -1, 0));
	t_ray r6 = ft_create_ray(ft_point(2, 2, 0), ft_vector(-1, 0, 0));

	t_intersections *intersections = NULL;
	ft_cube_intersections(&intersections, cube, r1);
	ft_cube_intersections(&intersections, cube, r2);
	ft_cube_intersections(&intersections, cube, r3);
	ft_cube_intersections(&intersections, cube, r4);
	ft_cube_intersections(&intersections, cube, r5);
	ft_cube_intersections(&intersections, cube, r6);
	printf("Intersections: %d\n", ft_lstsize(intersections));
	ft_free_intersections(&intersections);
	ft_free_shapes(cube);

------------------------

	t_vec3 n1 = ft_cube_normal_at(ft_point(1, 0.5, -0.8));
	t_vec3 n2 = ft_cube_normal_at(ft_point(-1, -0.2, 0.9));
	t_vec3 n3 = ft_cube_normal_at(ft_point(-0.4, 1, -0.1));
	t_vec3 n4 = ft_cube_normal_at(ft_point(0.3, -1, -0.7));
	t_vec3 n5 = ft_cube_normal_at(ft_point(-0.6, 0.3, 1));
	t_vec3 n6 = ft_cube_normal_at(ft_point(0.4, 0.4, -1));
	t_vec3 n7 = ft_cube_normal_at(ft_point(1, 1, 1));
	t_vec3 n8 = ft_cube_normal_at(ft_point(-1, -1, -1));

	printf("n1: %f %f %f\n", n1.x, n1.y, n1.z);
	printf("n2: %f %f %f\n", n2.x, n2.y, n2.z);
	printf("n3: %f %f %f\n", n3.x, n3.y, n3.z);
	printf("n4: %f %f %f\n", n4.x, n4.y, n4.z);
	printf("n5: %f %f %f\n", n5.x, n5.y, n5.z);
	printf("n6: %f %f %f\n", n6.x, n6.y, n6.z);
	printf("n7: %f %f %f\n", n7.x, n7.y, n7.z);
	printf("n8: %f %f %f\n", n8.x, n8.y, n8.z);

------------------------

CHAPTER 11

/*t_material m = ft_create_material();
	printf("m->transparency: %f\n", m.transparency);
	printf("m->refraction_index: %f\n", m.refractive_index);

	t_shapes *s = ft_create_glass_sphere();
	printf("s->material.transparency: %f\n", s->material.transparency);
	printf("s->material.refraction_index: %f\n", s->material.refractive_index);
	for (int i = 0; i < s->transform.rows; i++)
	{
		for (int j = 0; j < s->transform.cols; j++)
			printf("%f ", s->transform.data[i][j]);
		printf("\n");
	}*/

	/*t_shapes *s1 = ft_create_glass_sphere();
	ft_set_shape_transform(s1, ft_create_scaling_matrix(2, 2, 2));
	s1->material.refractive_index = 1.5;
	t_shapes *s2 = ft_create_glass_sphere();
	ft_set_shape_transform(s2, ft_create_translation_matrix(0, 0, -0.25));
	s2->material.refractive_index = 2.0;
	t_shapes *s3 = ft_create_glass_sphere();
	ft_set_shape_transform(s3, ft_create_translation_matrix(0, 0, 0.25));
	s3->material.refractive_index = 2.5;
	t_ray r = ft_create_ray(ft_point(0, 0, -4), ft_vector(0, 0, 1));
	t_intersections *i = NULL;
	ft_add_sorted_intersection(&i, s1, 2);
	ft_add_sorted_intersection(&i, s2, 2.75);
	ft_add_sorted_intersection(&i, s3, 3.25);
	ft_add_sorted_intersection(&i, s2, 4.75);
	ft_add_sorted_intersection(&i, s3, 5.25);
	ft_add_sorted_intersection(&i, s1, 6);
	t_intersections *temp = i;
	while (temp)
	{
		t_comps *comps = ft_prepare_computations(&i, temp->content, r);
		printf("comps->n1: %f\n", comps->n1);
		printf("comps->n2: %f\n", comps->n2);
		free(comps);
		temp = temp->next;
	}
	ft_free_intersections(&i);
	ft_free_shapes(s1);
	ft_free_shapes(s2);
	ft_free_shapes(s3);*/

	/*t_ray r = ft_create_ray(ft_point(0, 0, -5), ft_vector(0, 0, 1));
	t_shapes *s = ft_create_glass_sphere();
	ft_set_shape_transform(s, ft_create_translation_matrix(0, 0, 1));
	t_intersection *i = ft_create_intersection(5, s);
	t_intersections *xs = NULL;
	xs = ft_lstnew(i);
	t_comps *comps = ft_prepare_computations(&xs, i, r);
	if (comps->under_point.z > EPSILON/2)
		printf("comps->under_point.z: %f\n", comps->under_point.z);
	if (comps->point.z < comps->under_point.z)
		printf("comps->under_point.z: %f\n", comps->under_point.z);
	free(comps);
	ft_free_intersections(&xs);
	ft_free_shapes(s);*/

	/*t_world *w = ft_create_default_world();
	t_shapes *s = w->objects->content;
	t_ray r = ft_create_ray(ft_point(0, 0, -5), ft_vector(0, 0, 1));
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, s, 4);
	ft_add_sorted_intersection(&xs, s, 6);
	t_comps *comps = ft_prepare_computations(&xs, xs->content, r);
	t_color c = ft_refracted_color(w, comps, 5);
	printf("c: %f %f %f\n", c.x, c.y, c.z);
	ft_free_intersections(&xs);
	ft_free_world(w);
	free(comps);
	return (0);*/

	/*t_world *w = ft_create_default_world();
	t_shapes *s = w->objects->content;
	s->material.transparency = 1.0;
	s->material.refractive_index = 1.5;
	t_ray r = ft_create_ray(ft_point(0, 0, -5), ft_vector(0, 0, 1));
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, s, 4);
	ft_add_sorted_intersection(&xs, s, 6);
	t_comps *comps = ft_prepare_computations(&xs, xs->content, r);
	t_color c = ft_refracted_color(w, comps, 0);
	printf("c: %f %f %f\n", c.x, c.y, c.z);
	ft_free_intersections(&xs);
	ft_free_world(w);
	free(comps);*/

	/*t_world *w = ft_create_default_world();
	t_shapes *s = w->objects->content;
	s->material.transparency = 1.0;
	s->material.refractive_index = 1.5;
	t_ray r = ft_create_ray(ft_point(0, 0, sqrt(2)/2), ft_vector(0, 1, 0));
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, s, -sqrt(2)/2);
	ft_add_sorted_intersection(&xs, s, sqrt(2)/2);
	t_comps *comps = ft_prepare_computations(&xs, xs->next->content, r);
	t_color c = ft_refracted_color(w, comps, 5);
	printf("c: %f %f %f\n", c.x, c.y, c.z);
	ft_free_intersections(&xs);
	ft_free_world(w);
	free(comps);*/

	/*t_world *w = ft_create_default_world();
	t_shapes *sa = w->objects->content;
	sa->material.ambient = 0.5;
	//sa->material.pattern = ft_create_pattern(TEST, ft_color(0, 0, 0), ft_color(1, 1, 1));
	t_shapes *sb = w->objects->next->content;
	sb->material.transparency = 1.0;
	sb->material.refractive_index = 1.5;
	t_ray r = ft_create_ray(ft_point(0, 0, 0.1), ft_vector(0, 1, 0));
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, sa, -0.9899);
	ft_add_sorted_intersection(&xs, sb, -0.4899);
	ft_add_sorted_intersection(&xs, sb, 0.4899);
	ft_add_sorted_intersection(&xs, sa, 0.9899);
	t_comps *comps = ft_prepare_computations(&xs, xs->next->next->content, r);
	t_color c = ft_refracted_color(w, comps, 5);
	printf("c: %f %f %f\n", c.x, c.y, c.z);
	ft_free_intersections(&xs);
	ft_free_world(w);
	free(comps);*/

	/*t_world *w2 = ft_create_default_world();
	t_shapes *floor = ft_create_shape(PLANE);
	ft_set_shape_transform(floor, ft_create_translation_matrix(0, -1, 1));
	floor->material.transparency = 0.5;
	floor->material.refractive_index = 1.5;
	ft_add_shapes(&w2->objects, floor);
	t_shapes *ball = ft_create_shape(SPHERE);
	ball->material.color = ft_color(1, 0, 0);
	ball->material.ambient = 0.5;
	ft_set_shape_transform(ball, ft_create_translation_matrix(0, -3.5, -0.5));
	ft_add_shapes(&w2->objects, ball);
	t_ray r2 = ft_create_ray(ft_point(0, 0, -3), ft_vector(0, -sqrt(2)/2, sqrt(2)/2));
	t_intersections *xs2 = NULL;
	ft_add_sorted_intersection(&xs2, floor, sqrt(2));
	t_comps *comps2 = ft_prepare_computations(&xs2, xs2->content, r2);
	t_color c2 = ft_shade_hit(w2, comps2, 5);
	printf("c2: %f %f %f\n", c2.x, c2.y, c2.z);
	ft_free_intersections(&xs2);
	ft_free_world(w2);
	free(comps2);*/

	/*t_shapes *s = ft_create_shape(SPHERE);
	ft_set_shape_transform(s, ft_create_scaling_matrix(2, 2, 2));
	t_pattern p = ft_create_test_pattern();
	t_color c = ft_pattern_at_shape(p, s, ft_point(2, 3, 4));
	printf("c: %f %f %f\n", c.x, c.y, c.z);*/

	/*t_shapes *s = ft_create_glass_sphere();
	t_ray r = ft_create_ray(ft_point(0, 0, sqrt(2)/2), ft_vector(0, 1, 0));
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, s, -sqrt(2)/2);
	ft_add_sorted_intersection(&xs, s, sqrt(2)/2);
	t_comps *comps = ft_prepare_computations(&xs, xs->next->content, r);
	double reflectance = ft_schlick(comps);
	printf("reflectance: %f\n", reflectance);*/

	/*t_shapes *s = ft_create_glass_sphere();
	t_ray r = ft_create_ray(ft_point(0, 0, 0), ft_vector(0, 1, 0));
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, s, -1);
	ft_add_sorted_intersection(&xs, s, 1);
	t_comps *comps = ft_prepare_computations(&xs, xs->next->content, r);
	double reflectance = ft_schlick(comps);
	printf("reflectance: %f\n", reflectance);

	t_shapes *s1 = ft_create_glass_sphere();
	t_ray r1 = ft_create_ray(ft_point(0, 0.99, -2), ft_vector(0, 0, 1));
	t_intersections *xs1 = NULL;
	ft_add_sorted_intersection(&xs1, s1, 1.8589);
	t_comps *comps1 = ft_prepare_computations(&xs1, xs1->content, r1);
	double reflectance1 = ft_schlick(comps1);
	printf("reflectance1: %f\n", reflectance1);*/

	t_world *w = ft_create_default_world();
	t_ray r = ft_create_ray(ft_point(0, 0, -3), ft_vector(0, -sqrt(2)/2, sqrt(2)/2));
	t_shapes *floor = ft_create_shape(PLANE);
	ft_set_shape_transform(floor, ft_create_translation_matrix(0, -1, 0));
	floor->material.reflective = 0.5;
	floor->material.transparency = 0.5;
	floor->material.refractive_index = 1.5;
	ft_add_shapes(&w->objects, floor);
	t_shapes *ball = ft_create_shape(SPHERE);
	ball->material.color = ft_color(1, 0, 0);
	ball->material.ambient = 0.5;
	ft_set_shape_transform(ball, ft_create_translation_matrix(0, -3.5, -0.5));
	ft_add_shapes(&w->objects, ball);
	t_intersections *xs = NULL;
	ft_add_sorted_intersection(&xs, floor, sqrt(2));
	t_comps *comps = ft_prepare_computations(&xs, xs->content, r);
	t_color c = ft_shade_hit(w, comps, 5);
	printf("c: %f %f %f\n", c.x, c.y, c.z);

------------------------

TRIANGLES

	// TEST 1
	/*t_shapes *t = ft_create_shape(TRIANGLE);
	printf("t->p1: %f, %f, %f\n", t->triangle->p1.x, t->triangle->p1.y, t->triangle->p1.z);
	printf("t->p2: %f, %f, %f\n", t->triangle->p2.x, t->triangle->p2.y, t->triangle->p2.z);
	printf("t->p3: %f, %f, %f\n", t->triangle->p3.x, t->triangle->p3.y, t->triangle->p3.z);
	printf("t->e1: %f, %f, %f\n", t->triangle->e1.x, t->triangle->e1.y, t->triangle->e1.z);
	printf("t->e2: %f, %f, %f\n", t->triangle->e2.x, t->triangle->e2.y, t->triangle->e2.z);
	printf("t->normal: %f, %f, %f\n", t->triangle->normal.x, t->triangle->normal.y, t->triangle->normal.z);*/

	// TEST 2
	/*t_shapes *t = ft_create_shape(TRIANGLE);
	t_vec3 n1 = ft_normal_at(t, ft_point(0, 0.5, 0));
	t_vec3 n2 = ft_normal_at(t, ft_point(-0.5, 0.75, 0));
	t_vec3 n3 = ft_normal_at(t, ft_point(0.5, 0.25, 0));
	printf("n1: %f, %f, %f\n", n1.x, n1.y, n1.z);
	printf("n2: %f, %f, %f\n", n2.x, n2.y, n2.z);
	printf("n3: %f, %f, %f\n", n3.x, n3.y, n3.z);*/

	// TEST 3
	/*t_shapes *t = ft_create_shape(TRIANGLE);
	t_ray r = ft_create_ray(ft_point(0, -1, -2), ft_vector(0, 1, 0));
	t_intersections *xs = NULL;
	ft_triangle_intersections(&xs, t, r);
	printf("xs->size: %d\n", ft_lstsize(xs));*/

	// TEST 4
	/*t_shapes *t = ft_create_shape(TRIANGLE);
	t_ray r = ft_create_ray(ft_point(1, 1, -2), ft_vector(0, 0, 1));
	t_intersections *xs = NULL;
	ft_triangle_intersections(&xs, t, r);
	printf("xs->size: %d\n", ft_lstsize(xs));*/

	// TEST 5
	/*t_shapes *t = ft_create_shape(TRIANGLE);
	t_ray r = ft_create_ray(ft_point(-1, 1, -2), ft_vector(0, 0, 1));
	t_intersections *xs = NULL;
	ft_triangle_intersections(&xs, t, r);
	printf("xs->size: %d\n", ft_lstsize(xs));
	ft_free_intersections(&xs);

	r = ft_create_ray(ft_point(0, -1, -2), ft_vector(0, 0, 1));
	xs = NULL;
	ft_triangle_intersections(&xs, t, r);
	printf("xs->size: %d\n", ft_lstsize(xs));
	ft_free_shapes(t);
	ft_free_intersections(&xs);*/

	// TEST 6
	/*t_shapes *t = ft_create_shape(TRIANGLE);
	t_ray r = ft_create_ray(ft_point(0, 0.5, -2), ft_vector(0, 0, 1));
	t_intersections *xs = NULL;
	ft_triangle_intersections(&xs, t, r);
	printf("xs->size: %d\n", ft_lstsize(xs));
	printf("xs->head->t: %f\n", ((t_intersection *)xs->content)->t);
	ft_free_shapes(t);
	ft_free_intersections(&xs);*/



















t_color	ft_get_rgb(char *s)
{
	char	r[4];
	char	g[4];
	char	b[4];
	int		i;

	i = 0;
	while (*s)
	{
		if (i <= 2)
			r[i++] = *s++;
		else if (i > 2 && i <= 5)
			g[i++ - 3] = *s++;
		else if (i > 5 && i <= 8)
			b[i++ - 6] = *s++;
		else
			ft_perror("Color is not valid");
	}
	r[3] = '\0';
	g[3] = '\0';
	b[3] = '\0';
	return ((t_color){ft_atoi(r) / 255.0,
		ft_atoi(g) / 255.0, ft_atoi(b) / 255.0, 3});
}

t_color	ft_get_color(char **line)
{
	/*int		i;
	char	s[10];
	t_color	color;

	i = -1;
	while (*line)
	{
		if (ft_isspace(*line))
			line++;
		else if (ft_isdigit(*line) && i < 8)
			s[++i] = *line++;
		else if (*line == ',')
			line++;
		else
			ft_perror("Color is not valid");
	}
	s[++i] = '\0';
	color = ft_get_rgb(s);
	if (color.x < 0 || color.x > 1 || color.y < 0 || color.y > 1
		|| color.z < 0 || color.z > 1)
		ft_perror("Color is not valid");
	return (color);*/
